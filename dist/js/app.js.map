{"version":3,"sources":["app.js"],"names":["console","log","document","onreadystatechange","readyState","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","data","FormData","append","fetch","method","body","then","retourReponse","json","catch","error","connexionLogin","querySelector","loginLogin","passLogin","verify","element","event","addEventListener","e","key","value","result","innerHTML","window","location","replace","connexion_login","login_login","pass_login","Chart","getElementById","type","labels","datasets","yAxisID","label","borderColor","fill","options","legend","display","title","text","scales","yAxes","id","ticks","min","max","gridLines","drawOnChartArea","validerRegister","mailRegister","passRegister","prenomRegister","sexeRegister","localisationRegister","colorRegister","message","i","length","style","backgroundColor"],"mappings":"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","file":"app.js","sourcesContent":["console.log(\"le js charge\");\n\ndocument.onreadystatechange = function () {\n    console.log(\"onreadystatechange marche\");\n    if (document.readyState === \"complete\") {\n        console.log(\"if complete marche\");\n        if (navigator.geolocation) { /*demander l'autorisation d'obtenir la géolocalisation*/\n        navigator.geolocation.getCurrentPosition(function (position) {\n\n            let latitude = position.coords.latitude;\n            let longitude = position.coords.longitude;\n\n            let data = new FormData();\n\n            data.append(\"latitude\", latitude);\n            data.append(\"longitude\", longitude);\n\n            console.log(\"if geolocalisation marche\");\n            fetch(\"/weather/get\", {method: \"POST\", body: data})\n                .then((retourReponse) => {\n                    return retourReponse.json();\n                })\n                .then((retourReponse) => {\n\n                    console.log(retourReponse);\n\n                }).catch((error) => {\n                    console.log(error);\n                });\n            })\n        }\n    }\n}\nconst connexionLogin = document.querySelector(\"#connexion_login\");\nconst loginLogin = document.querySelector(\"#login_login\");\nconst passLogin = document.querySelector(\"#pass_login\");\n\n\nfunction verify(element, event) {\n\n    element.addEventListener(event, (e) => {\n\n        if (e.key === \"Enter\" || event === \"click\") {\n           \n            let data = new FormData();\n            data.append(\"login\", loginLogin.value);\n            data.append(\"pass\", passLogin.value);\n        \n            fetch(\"/login/verif\", {method: \"POST\", body: data})\n            .then( (result) => { return result.json() } )\n            .then( (result) => {\n                // console.log(result.error);\n                if(!result.error){\n                    console.log(result);\n                    window.location.replace(\"/user\");\n                } else {\n                    document.querySelector(\"#error\").innerHTML = result.error;\n                }\n            });\n        }\n    })\n}\n\nverify(connexion_login, \"click\");\nverify(login_login, \"keydown\");\nverify(pass_login, \"keydown\");\nnew Chart(document.getElementById(\"summaryChart\"), {\n    type: 'line',\n    data: {\n      labels: ['00:00', '06:00', '12:00', '18:00', '24:00'],\n      datasets: [{ \n          data: [1, 3, 8, 5, 2],\n          yAxisID: 'temperature',\n          label: \"Température\",\n          borderColor: \"#980000\",\n          fill: true\n        }, { \n          data: [0, 2, 5, 10, 3],\n          yAxisID: 'rain',\n          label: \"Précipitation\",\n          borderColor: \"#030340\",\n          fill: true\n        }\n      ]\n    },\n    options: {\n        legend:{\n            display: false\n        },\n        title: {\n            display: false,\n            text: 'World population per region (in millions)'\n        },\n        scales: {\n            yAxes: [{\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: true,\n                position: 'left',\n                id: 'temperature',\n            }, {\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: true,\n                position: 'right',\n                id: 'rain',\n                ticks: {\n                    min: 0,\n                    max: 100\n                },\n\n                // grid line settings\n                gridLines: {\n                    drawOnChartArea: false, // only want the grid lines for one axis to show up\n                },\n            }],\n        }\n    }\n  });\n  \n// $('.message a').click(function(){\n//     $('form').animate({height: \"toggle\", opacity: \"toggle\"}, \"slow\");\n//  });\n\nconst validerRegister = document.querySelector(\"#valider-register\");\nconst mailRegister = document.querySelector(\"#mail-register\");\nconst passRegister = document.querySelector(\"#pass-register\");\nconst prenomRegister = document.querySelector(\"#prenom-register\");\nconst sexeRegister = document.querySelector(\"#sexe-register\");\nconst localisationRegister = document.querySelector(\"#localisation-register\");\nconst colorRegister = document.querySelector(\"#color-register\");\n\ncolorRegister.addEventListener('click', () => {\n    colorRegister.style.backgroundColor = colorRegister.value; \n})\n\nfunction verify(element, event) {\n\n    element.addEventListener(event, (e) => {\n\n        if (e.key === \"Enter\" || event === \"click\") {\n            let data = new FormData();\n            data.append(\"mail\", mailRegister.value);\n            data.append(\"pass\", passRegister.value);\n            data.append(\"prenom\", prenomRegister.value);\n            data.append(\"sexe\", sexeRegister.value);\n            data.append(\"color\", colorRegister.value);\n            data.append(\"localisation\", localisationRegister.value);\n        \n            fetch(\"/register/verif\", {method: \"POST\", body: data})\n            .then( (result) => { return result.json() } )\n            .then( (result) => {\n                console.log(result);\n                if(!result.message){\n                    document.querySelector(\".message\").innerHTML = \"Inscription réussie, vous allez être redirigé.\";\n                    // setTimeout(function(){\n                    //     window.location.replace(\"/weather\");\n                    // }, 3000);\n                } else {\n                    document.querySelector(\".message\").innerHTML = \"\";\n                    for (let i = 0; i < result.message.length; i++) {\n                        document.querySelector(\".message\").innerHTML += result.message[i] + '</br>';\n                    }\n                }\n                }\n            );\n        }\n    })\n}\n\nverify(validerRegister, \"click\");\nverify(mailRegister, \"keydown\");\nverify(passRegister, \"keydown\");\nverify(prenomRegister, \"keydown\");\nverify(localisationRegister, \"keydown\");"]}