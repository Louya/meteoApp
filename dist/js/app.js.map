{"version":3,"sources":["app.js"],"names":["Chart","document","getElementById","type","data","labels","datasets","yAxisID","label","borderColor","fill","options","legend","display","title","text","scales","yAxes","position","id","ticks","min","max","gridLines","drawOnChartArea","connexionLogin","querySelector","loginLogin","passLogin","verify","element","event","addEventListener","e","key","FormData","append","login","value","pass","fetch","method","body","then","result","json","error","innerHTML","console","log","window","location","replace","connexion_login","login_login","pass_login","validerRegister","mailRegister","passRegister","prenomRegister","sexeRegister","adresseRegister","villeRegister","colorRegister","verifyRegister","message","i","length","style","backgroundColor","onreadystatechange","readyState","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","retourReponse","catch"],"mappings":"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","file":"app.js","sourcesContent":["new Chart(document.getElementById(\"summaryChart\"), {\n    type: 'line',\n    data: {\n      labels: ['00:00', '06:00', '12:00', '18:00', '24:00'],\n      datasets: [{ \n          data: [1, 3, 8, 5, 2],\n          yAxisID: 'temperature',\n          label: \"Température\",\n          borderColor: \"#980000\",\n          fill: true\n        }, { \n          data: [0, 2, 5, 10, 3],\n          yAxisID: 'rain',\n          label: \"Précipitation\",\n          borderColor: \"#030340\",\n          fill: true\n        }\n      ]\n    },\n    options: {\n        legend:{\n            display: false\n        },\n        title: {\n            display: false,\n            text: 'World population per region (in millions)'\n        },\n        scales: {\n            yAxes: [{\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: true,\n                position: 'left',\n                id: 'temperature',\n            }, {\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                display: true,\n                position: 'right',\n                id: 'rain',\n                ticks: {\n                    min: 0,\n                    max: 100\n                },\n\n                // grid line settings\n                gridLines: {\n                    drawOnChartArea: false, // only want the grid lines for one axis to show up\n                },\n            }],\n        }\n    }\n  });\n  \nconst connexionLogin = document.querySelector(\"#connexion_login\");\nconst loginLogin = document.querySelector(\"#login_login\");\nconst passLogin = document.querySelector(\"#pass_login\");\n\nverify(connexion_login, \"click\");\nverify(login_login, \"keydown\");\nverify(pass_login, \"keydown\");\n\nfunction verify(element, event) {\n\n    element.addEventListener(event, (e) => {\n\n        if (e.key === \"Enter\" || event === \"click\") {\n           \n            let data = new FormData();\n            data.append(\"login\", login.value);\n            data.append(\"pass\", pass.value);\n        \n            fetch(\"/login/verif\", {method: \"POST\", body: data})\n            .then( (result) => { return result.json() } )\n            .then( (result) => {\n                // console.log(result.error);\n                if(!result.error){\n                    console.log(result);\n                    window.location.replace(\"/user\");\n                } else {\n                    document.querySelector(\"#error\").innerHTML = result.error;\n                }\n            });\n        }\n    })\n}\n// $('.message a').click(function(){\n//     $('form').animate({height: \"toggle\", opacity: \"toggle\"}, \"slow\");\n//  });\n\nconst validerRegister = document.querySelector(\"#valider-register\");\nconst mailRegister = document.querySelector(\"#mail-register\");\nconst passRegister = document.querySelector(\"#pass-register\");\nconst prenomRegister = document.querySelector(\"#prenom-register\");\nconst sexeRegister = document.querySelector(\"#sexe-register\");\nconst adresseRegister = document.querySelector(\"#adresse-register\");\nconst villeRegister = document.querySelector(\"#ville-register\");\nconst colorRegister = document.querySelector(\"#color-register\");\n\ncolorRegister.addEventListener('click', () => {\n    colorRegister.style.backgroundColor = colorRegister.value; \n})\n\nfunction verifyRegister(element, event) {\n\n    element.addEventListener(event, (e) => {\n\n        if (e.key === \"Enter\" || event === \"click\") {\n            let data = new FormData();\n            data.append(\"mail\", mailRegister.value);\n            data.append(\"pass\", passRegister.value);\n            data.append(\"prenom\", prenomRegister.value);\n            data.append(\"sexe\", sexeRegister.value);\n            data.append(\"color\", colorRegister.value);\n            data.append(\"adresse\", adresseRegister.value);\n            data.append(\"ville\", villeRegister.value);\n        \n            fetch(\"/register/verif\", {method: \"POST\", body: data})\n            .then( (result) => { return result.json() } )\n            .then( (result) => {\n                console.log(result);\n                if(!result.message){\n                    document.querySelector(\".message\").innerHTML = \"Inscription réussie, vous allez être redirigé.\";\n                    // setTimeout(function(){\n                    //     window.location.replace(\"/weather\");\n                    // }, 3000);\n                } else {\n                    document.querySelector(\".message\").innerHTML = \"\";\n                    for (let i = 0; i < result.message.length; i++) {\n                        document.querySelector(\".message\").innerHTML += result.message[i] + '</br>';\n                    }\n                }\n                }\n            );\n        }\n    })\n}\n\nverifyRegister(validerRegister, \"click\");\nverifyRegister(mailRegister, \"keydown\");\nverifyRegister(passRegister, \"keydown\");\nverifyRegister(prenomRegister, \"keydown\");\nverifyRegister(adresseRegister, \"keydown\");\nverifyRegister(villeRegister, \"keydown\");\n\nconsole.log(\"le js\");\n\ndocument.onreadystatechange = function () {\n    console.log(\"onreadystatechange marche\");\n    if (document.readyState === \"complete\") {\n        console.log(\"if complete marche\");\n        if (navigator.geolocation) { /*demander l'autorisation d'obtenir la géolocalisation*/\n        navigator.geolocation.getCurrentPosition(function (position) {\n\n            let latitude = position.coords.latitude;\n            let longitude = position.coords.longitude;\n\n            let data = new FormData();\n\n            data.append(\"latitude\", latitude);\n            data.append(\"longitude\", longitude);\n\n            console.log(\"if geolocalisation marche\");\n            fetch(\"/weather/get\", {method: \"POST\", body: data})\n                .then((retourReponse) => {\n                    return retourReponse.json();\n                })\n                .then((retourReponse) => {\n\n                    console.log(retourReponse);\n\n                }).catch((error) => {\n                    console.log(error);\n                });\n            })\n        }\n    }\n}"]}